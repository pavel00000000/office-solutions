const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const path = require('path');
const cors = require('cors');

dotenv.config();
const app = express();
const port = process.env.PORT || 3000;

const { TELEGRAM_TOKEN, CHAT_ID } = process.env;
if (!TELEGRAM_TOKEN || !CHAT_ID) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏ CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN);

app.use(cors({ origin: '*' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(__dirname));

app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

app.get('/api', (req, res) => {
  res.status(200).json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /submit –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.' });
});

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.post('/submit', (req, res) => {
  const { name, age, phone, city } = req.body;
  if (!name || !age || !phone || !city) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  if (isNaN(age) || age < 16) {
    return res.status(400).json({ error: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –Ω–µ –º–µ–Ω–µ–µ 16 –ª–µ—Ç' });
  }

  const message = `
    –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
    –ò–º—è: ${name}
    –í–æ–∑—Ä–∞—Å—Ç: ${age}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    –ì–æ—Ä–æ–¥: ${city}
    –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
  `;

  bot.sendMessage(CHAT_ID, message)
    .then(() => {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      res.status(200).json({ success: true });
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    });
});

if (process.env.NODE_ENV === 'production') {
  const webhookUrl = `https://workoffice.website/bot${TELEGRAM_TOKEN}`;

  bot.setWebHook(webhookUrl)
    .then(() => console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`))
    .catch((err) => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook:', err.message));

  app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
} else {
  bot.startPolling({ restart: true });
  console.log('Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
}

app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

app.use((err, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err.stack);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// üî• –í–ê–ñ–ù–û: –∑–¥–µ—Å—å —Å–ª—É—à–∞–µ–º –Ω–µ localhost, –∞ 0.0.0.0!
app.listen(port, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${port}`);
});

